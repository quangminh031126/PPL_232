# Generated from /home/qmi/repos/initial/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,50,398,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,1,0,1,0,3,0,122,8,0,1,1,1,1,3,1,126,8,1,1,1,1,1,1,2,4,2,131,8,
        2,11,2,12,2,132,1,3,1,3,1,3,3,3,138,8,3,1,4,1,4,1,4,1,5,1,5,1,5,
        1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,
        1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
        1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,
        1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,
        1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,
        1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,
        1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,
        1,51,3,51,318,8,51,1,51,3,51,321,8,51,1,52,1,52,5,52,325,8,52,10,
        52,12,52,328,9,52,1,52,1,52,1,52,1,53,1,53,3,53,335,8,53,1,53,1,
        53,1,53,5,53,340,8,53,10,53,12,53,343,9,53,1,54,1,54,1,54,1,54,5,
        54,349,8,54,10,54,12,54,352,9,54,1,54,5,54,355,8,54,10,54,12,54,
        358,9,54,1,54,1,54,1,55,4,55,363,8,55,11,55,12,55,364,1,55,1,55,
        1,56,1,56,1,56,1,57,1,57,5,57,374,8,57,10,57,12,57,377,9,57,1,57,
        1,57,3,57,381,8,57,1,57,1,57,1,58,1,58,5,58,387,8,58,10,58,12,58,
        390,9,58,1,58,1,58,1,58,3,58,395,8,58,1,58,1,58,1,350,0,59,1,0,3,
        0,5,0,7,0,9,0,11,0,13,0,15,0,17,0,19,1,21,2,23,3,25,4,27,5,29,6,
        31,7,33,8,35,9,37,10,39,11,41,12,43,13,45,14,47,15,49,16,51,17,53,
        18,55,19,57,20,59,21,61,22,63,23,65,24,67,25,69,26,71,27,73,28,75,
        29,77,30,79,31,81,32,83,33,85,34,87,35,89,36,91,37,93,38,95,39,97,
        40,99,41,101,42,103,43,105,44,107,45,109,46,111,47,113,48,115,49,
        117,50,1,0,9,2,0,69,69,101,101,2,0,43,43,45,45,4,0,10,10,13,13,34,
        34,92,92,7,0,39,39,92,92,98,98,102,102,110,110,114,114,116,116,2,
        0,65,90,97,122,1,0,48,57,2,0,10,10,12,13,3,0,9,10,13,13,32,32,1,
        0,92,92,408,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,
        0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
        0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,
        0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,
        0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,
        1,0,0,0,0,117,1,0,0,0,1,119,1,0,0,0,3,123,1,0,0,0,5,130,1,0,0,0,
        7,137,1,0,0,0,9,139,1,0,0,0,11,142,1,0,0,0,13,145,1,0,0,0,15,147,
        1,0,0,0,17,149,1,0,0,0,19,151,1,0,0,0,21,156,1,0,0,0,23,162,1,0,
        0,0,25,169,1,0,0,0,27,174,1,0,0,0,29,181,1,0,0,0,31,188,1,0,0,0,
        33,192,1,0,0,0,35,200,1,0,0,0,37,205,1,0,0,0,39,209,1,0,0,0,41,215,
        1,0,0,0,43,218,1,0,0,0,45,224,1,0,0,0,47,233,1,0,0,0,49,236,1,0,
        0,0,51,241,1,0,0,0,53,246,1,0,0,0,55,252,1,0,0,0,57,256,1,0,0,0,
        59,260,1,0,0,0,61,264,1,0,0,0,63,267,1,0,0,0,65,269,1,0,0,0,67,271,
        1,0,0,0,69,273,1,0,0,0,71,275,1,0,0,0,73,277,1,0,0,0,75,279,1,0,
        0,0,77,282,1,0,0,0,79,285,1,0,0,0,81,288,1,0,0,0,83,290,1,0,0,0,
        85,292,1,0,0,0,87,295,1,0,0,0,89,298,1,0,0,0,91,302,1,0,0,0,93,304,
        1,0,0,0,95,306,1,0,0,0,97,308,1,0,0,0,99,310,1,0,0,0,101,312,1,0,
        0,0,103,314,1,0,0,0,105,322,1,0,0,0,107,334,1,0,0,0,109,344,1,0,
        0,0,111,362,1,0,0,0,113,368,1,0,0,0,115,371,1,0,0,0,117,384,1,0,
        0,0,119,121,5,46,0,0,120,122,3,5,2,0,121,120,1,0,0,0,121,122,1,0,
        0,0,122,2,1,0,0,0,123,125,7,0,0,0,124,126,7,1,0,0,125,124,1,0,0,
        0,125,126,1,0,0,0,126,127,1,0,0,0,127,128,3,5,2,0,128,4,1,0,0,0,
        129,131,3,17,8,0,130,129,1,0,0,0,131,132,1,0,0,0,132,130,1,0,0,0,
        132,133,1,0,0,0,133,6,1,0,0,0,134,138,8,2,0,0,135,138,3,11,5,0,136,
        138,3,9,4,0,137,134,1,0,0,0,137,135,1,0,0,0,137,136,1,0,0,0,138,
        8,1,0,0,0,139,140,5,39,0,0,140,141,5,34,0,0,141,10,1,0,0,0,142,143,
        5,92,0,0,143,144,7,3,0,0,144,12,1,0,0,0,145,146,7,4,0,0,146,14,1,
        0,0,0,147,148,5,95,0,0,148,16,1,0,0,0,149,150,7,5,0,0,150,18,1,0,
        0,0,151,152,5,116,0,0,152,153,5,114,0,0,153,154,5,117,0,0,154,155,
        5,101,0,0,155,20,1,0,0,0,156,157,5,102,0,0,157,158,5,97,0,0,158,
        159,5,108,0,0,159,160,5,115,0,0,160,161,5,101,0,0,161,22,1,0,0,0,
        162,163,5,110,0,0,163,164,5,117,0,0,164,165,5,109,0,0,165,166,5,
        98,0,0,166,167,5,101,0,0,167,168,5,114,0,0,168,24,1,0,0,0,169,170,
        5,98,0,0,170,171,5,111,0,0,171,172,5,111,0,0,172,173,5,108,0,0,173,
        26,1,0,0,0,174,175,5,115,0,0,175,176,5,116,0,0,176,177,5,114,0,0,
        177,178,5,105,0,0,178,179,5,110,0,0,179,180,5,103,0,0,180,28,1,0,
        0,0,181,182,5,114,0,0,182,183,5,101,0,0,183,184,5,116,0,0,184,185,
        5,117,0,0,185,186,5,114,0,0,186,187,5,110,0,0,187,30,1,0,0,0,188,
        189,5,118,0,0,189,190,5,97,0,0,190,191,5,114,0,0,191,32,1,0,0,0,
        192,193,5,100,0,0,193,194,5,121,0,0,194,195,5,110,0,0,195,196,5,
        97,0,0,196,197,5,109,0,0,197,198,5,105,0,0,198,199,5,99,0,0,199,
        34,1,0,0,0,200,201,5,102,0,0,201,202,5,117,0,0,202,203,5,110,0,0,
        203,204,5,99,0,0,204,36,1,0,0,0,205,206,5,102,0,0,206,207,5,111,
        0,0,207,208,5,114,0,0,208,38,1,0,0,0,209,210,5,117,0,0,210,211,5,
        110,0,0,211,212,5,116,0,0,212,213,5,105,0,0,213,214,5,108,0,0,214,
        40,1,0,0,0,215,216,5,98,0,0,216,217,5,121,0,0,217,42,1,0,0,0,218,
        219,5,98,0,0,219,220,5,114,0,0,220,221,5,101,0,0,221,222,5,97,0,
        0,222,223,5,107,0,0,223,44,1,0,0,0,224,225,5,99,0,0,225,226,5,111,
        0,0,226,227,5,110,0,0,227,228,5,116,0,0,228,229,5,105,0,0,229,230,
        5,110,0,0,230,231,5,117,0,0,231,232,5,101,0,0,232,46,1,0,0,0,233,
        234,5,105,0,0,234,235,5,102,0,0,235,48,1,0,0,0,236,237,5,101,0,0,
        237,238,5,108,0,0,238,239,5,115,0,0,239,240,5,101,0,0,240,50,1,0,
        0,0,241,242,5,101,0,0,242,243,5,108,0,0,243,244,5,105,0,0,244,245,
        5,102,0,0,245,52,1,0,0,0,246,247,5,98,0,0,247,248,5,101,0,0,248,
        249,5,103,0,0,249,250,5,105,0,0,250,251,5,110,0,0,251,54,1,0,0,0,
        252,253,5,101,0,0,253,254,5,110,0,0,254,255,5,100,0,0,255,56,1,0,
        0,0,256,257,5,110,0,0,257,258,5,111,0,0,258,259,5,116,0,0,259,58,
        1,0,0,0,260,261,5,97,0,0,261,262,5,110,0,0,262,263,5,100,0,0,263,
        60,1,0,0,0,264,265,5,111,0,0,265,266,5,114,0,0,266,62,1,0,0,0,267,
        268,5,43,0,0,268,64,1,0,0,0,269,270,5,45,0,0,270,66,1,0,0,0,271,
        272,5,42,0,0,272,68,1,0,0,0,273,274,5,47,0,0,274,70,1,0,0,0,275,
        276,5,37,0,0,276,72,1,0,0,0,277,278,5,61,0,0,278,74,1,0,0,0,279,
        280,5,60,0,0,280,281,5,45,0,0,281,76,1,0,0,0,282,283,5,61,0,0,283,
        284,5,61,0,0,284,78,1,0,0,0,285,286,5,33,0,0,286,287,5,61,0,0,287,
        80,1,0,0,0,288,289,5,60,0,0,289,82,1,0,0,0,290,291,5,62,0,0,291,
        84,1,0,0,0,292,293,5,60,0,0,293,294,5,61,0,0,294,86,1,0,0,0,295,
        296,5,62,0,0,296,297,5,61,0,0,297,88,1,0,0,0,298,299,5,46,0,0,299,
        300,5,46,0,0,300,301,5,46,0,0,301,90,1,0,0,0,302,303,5,40,0,0,303,
        92,1,0,0,0,304,305,5,41,0,0,305,94,1,0,0,0,306,307,5,91,0,0,307,
        96,1,0,0,0,308,309,5,93,0,0,309,98,1,0,0,0,310,311,5,44,0,0,311,
        100,1,0,0,0,312,313,5,10,0,0,313,102,1,0,0,0,314,320,3,5,2,0,315,
        321,3,1,0,0,316,318,3,1,0,0,317,316,1,0,0,0,317,318,1,0,0,0,318,
        319,1,0,0,0,319,321,3,3,1,0,320,315,1,0,0,0,320,317,1,0,0,0,320,
        321,1,0,0,0,321,104,1,0,0,0,322,326,5,34,0,0,323,325,3,7,3,0,324,
        323,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,
        329,1,0,0,0,328,326,1,0,0,0,329,330,5,34,0,0,330,331,6,52,0,0,331,
        106,1,0,0,0,332,335,3,13,6,0,333,335,3,15,7,0,334,332,1,0,0,0,334,
        333,1,0,0,0,335,341,1,0,0,0,336,340,3,13,6,0,337,340,3,15,7,0,338,
        340,3,17,8,0,339,336,1,0,0,0,339,337,1,0,0,0,339,338,1,0,0,0,340,
        343,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,108,1,0,0,0,343,
        341,1,0,0,0,344,345,5,35,0,0,345,346,5,35,0,0,346,350,1,0,0,0,347,
        349,9,0,0,0,348,347,1,0,0,0,349,352,1,0,0,0,350,351,1,0,0,0,350,
        348,1,0,0,0,351,356,1,0,0,0,352,350,1,0,0,0,353,355,8,6,0,0,354,
        353,1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,
        359,1,0,0,0,358,356,1,0,0,0,359,360,6,54,1,0,360,110,1,0,0,0,361,
        363,7,7,0,0,362,361,1,0,0,0,363,364,1,0,0,0,364,362,1,0,0,0,364,
        365,1,0,0,0,365,366,1,0,0,0,366,367,6,55,1,0,367,112,1,0,0,0,368,
        369,9,0,0,0,369,370,6,56,2,0,370,114,1,0,0,0,371,375,5,34,0,0,372,
        374,3,7,3,0,373,372,1,0,0,0,374,377,1,0,0,0,375,373,1,0,0,0,375,
        376,1,0,0,0,376,380,1,0,0,0,377,375,1,0,0,0,378,381,3,101,50,0,379,
        381,5,0,0,1,380,378,1,0,0,0,380,379,1,0,0,0,381,382,1,0,0,0,382,
        383,6,57,3,0,383,116,1,0,0,0,384,388,5,34,0,0,385,387,3,7,3,0,386,
        385,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,
        391,1,0,0,0,390,388,1,0,0,0,391,394,5,92,0,0,392,395,8,3,0,0,393,
        395,8,8,0,0,394,392,1,0,0,0,394,393,1,0,0,0,395,396,1,0,0,0,396,
        397,6,58,4,0,397,118,1,0,0,0,18,0,121,125,132,137,317,320,326,334,
        339,341,350,356,364,375,380,388,394,5,1,52,0,6,0,0,1,56,1,1,57,2,
        1,58,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TRUE = 1
    FALSE = 2
    NUMBER = 3
    BOOL = 4
    STRING = 5
    RETURN = 6
    VAR = 7
    DYNAMIC = 8
    FUNC = 9
    FOR = 10
    UNTIL = 11
    BY = 12
    BREAK = 13
    CONTINUE = 14
    IF = 15
    ELSE = 16
    ELIF = 17
    BEGIN = 18
    END = 19
    NOT = 20
    AND = 21
    OR = 22
    PLUS = 23
    MINUS = 24
    MULT = 25
    DIV = 26
    MOD = 27
    EQUAL = 28
    LEFTARR = 29
    EQUALEQUAL = 30
    NOTEQUAL = 31
    LESS = 32
    GREATER = 33
    LESSOREQUAL = 34
    GREATEROREQUAL = 35
    ELLIPSIS = 36
    LBracket = 37
    RBracket = 38
    LSBracket = 39
    RSBracket = 40
    COMMA = 41
    NEWLINE = 42
    NumberLit = 43
    StringLit = 44
    IDENTIFIER = 45
    COMMENT = 46
    WS = 47
    ERROR_CHAR = 48
    UNCLOSE_STRING = 49
    ILLEGAL_ESCAPE = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'number'", "'bool'", "'string'", "'return'", 
            "'var'", "'dynamic'", "'func'", "'for'", "'until'", "'by'", 
            "'break'", "'continue'", "'if'", "'else'", "'elif'", "'begin'", 
            "'end'", "'not'", "'and'", "'or'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'='", "'<-'", "'=='", "'!='", "'<'", "'>'", "'<='", 
            "'>='", "'...'", "'('", "')'", "'['", "']'", "','", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", "VAR", 
            "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", 
            "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", "AND", "OR", "PLUS", 
            "MINUS", "MULT", "DIV", "MOD", "EQUAL", "LEFTARR", "EQUALEQUAL", 
            "NOTEQUAL", "LESS", "GREATER", "LESSOREQUAL", "GREATEROREQUAL", 
            "ELLIPSIS", "LBracket", "RBracket", "LSBracket", "RSBracket", 
            "COMMA", "NEWLINE", "NumberLit", "StringLit", "IDENTIFIER", 
            "COMMENT", "WS", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "DECIMAL", "EXPONENT", "INTEGER", "StringChar", "DoubleQuote", 
                  "EscapedSequence", "LETTER", "UNDERSCORE", "DIGIT", "TRUE", 
                  "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", "VAR", 
                  "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", 
                  "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", "AND", "OR", 
                  "PLUS", "MINUS", "MULT", "DIV", "MOD", "EQUAL", "LEFTARR", 
                  "EQUALEQUAL", "NOTEQUAL", "LESS", "GREATER", "LESSOREQUAL", 
                  "GREATEROREQUAL", "ELLIPSIS", "LBracket", "RBracket", 
                  "LSBracket", "RSBracket", "COMMA", "NEWLINE", "NumberLit", 
                  "StringLit", "IDENTIFIER", "COMMENT", "WS", "ERROR_CHAR", 
                  "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[52] = self.StringLit_action 
            actions[56] = self.ERROR_CHAR_action 
            actions[57] = self.UNCLOSE_STRING_action 
            actions[58] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def StringLit_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
                    
                temp = self.text
                temp = temp[1:-1]  # Remove the opening and closing quotes
                self.text = temp

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                esc = ['\n']
                temp = str(self.text)
                if (temp[-1] in esc):
                    raise UncloseString(temp[1:-1])
                else:
                    raise UncloseString(temp[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                temp = self.text
                raise IllegalEscape(temp[1:])

     


