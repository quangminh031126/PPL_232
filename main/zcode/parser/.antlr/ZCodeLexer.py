# Generated from /Users/phamvoquangminh/repos/ass_PPL/initial/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,52,404,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,
        11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
        16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
        18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,
        21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
        27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,
        32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,
        36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,
        43,1,43,1,43,3,43,288,8,43,1,43,3,43,291,8,43,1,44,1,44,5,44,295,
        8,44,10,44,12,44,298,9,44,1,45,1,45,3,45,302,8,45,1,45,1,45,1,46,
        4,46,307,8,46,11,46,12,46,308,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,3,47,320,8,47,1,48,1,48,5,48,324,8,48,10,48,12,48,327,
        9,48,1,48,1,48,1,48,1,49,1,49,1,49,3,49,335,8,49,1,50,1,50,1,50,
        1,51,1,51,1,51,1,52,1,52,3,52,345,8,52,1,52,1,52,1,52,5,52,350,8,
        52,10,52,12,52,353,9,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,
        1,56,1,56,5,56,365,8,56,10,56,12,56,368,9,56,1,56,3,56,371,8,56,
        1,56,1,56,1,57,4,57,376,8,57,11,57,12,57,377,1,57,1,57,1,58,1,58,
        1,58,1,59,1,59,5,59,387,8,59,10,59,12,59,390,9,59,1,59,1,59,3,59,
        394,8,59,1,59,1,59,1,60,1,60,1,60,3,60,401,8,60,1,60,1,60,1,366,
        0,61,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,0,91,
        0,93,0,95,45,97,46,99,0,101,0,103,0,105,47,107,0,109,0,111,0,113,
        48,115,49,117,50,119,51,121,52,1,0,9,2,0,69,69,101,101,2,0,43,43,
        45,45,4,0,10,10,13,13,34,34,92,92,7,0,39,39,92,92,98,98,102,102,
        110,110,114,114,116,116,2,0,65,90,97,122,1,0,48,57,1,1,10,10,3,0,
        9,10,13,13,32,32,1,0,92,92,412,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,
        0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
        0,87,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,105,1,0,0,0,0,113,1,0,0,
        0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,1,123,
        1,0,0,0,3,128,1,0,0,0,5,130,1,0,0,0,7,132,1,0,0,0,9,139,1,0,0,0,
        11,144,1,0,0,0,13,151,1,0,0,0,15,158,1,0,0,0,17,162,1,0,0,0,19,170,
        1,0,0,0,21,175,1,0,0,0,23,179,1,0,0,0,25,185,1,0,0,0,27,188,1,0,
        0,0,29,194,1,0,0,0,31,203,1,0,0,0,33,206,1,0,0,0,35,211,1,0,0,0,
        37,216,1,0,0,0,39,222,1,0,0,0,41,226,1,0,0,0,43,230,1,0,0,0,45,234,
        1,0,0,0,47,237,1,0,0,0,49,239,1,0,0,0,51,241,1,0,0,0,53,243,1,0,
        0,0,55,245,1,0,0,0,57,247,1,0,0,0,59,249,1,0,0,0,61,252,1,0,0,0,
        63,255,1,0,0,0,65,258,1,0,0,0,67,260,1,0,0,0,69,262,1,0,0,0,71,265,
        1,0,0,0,73,268,1,0,0,0,75,272,1,0,0,0,77,274,1,0,0,0,79,276,1,0,
        0,0,81,278,1,0,0,0,83,280,1,0,0,0,85,282,1,0,0,0,87,284,1,0,0,0,
        89,292,1,0,0,0,91,299,1,0,0,0,93,306,1,0,0,0,95,319,1,0,0,0,97,321,
        1,0,0,0,99,334,1,0,0,0,101,336,1,0,0,0,103,339,1,0,0,0,105,344,1,
        0,0,0,107,354,1,0,0,0,109,356,1,0,0,0,111,358,1,0,0,0,113,360,1,
        0,0,0,115,375,1,0,0,0,117,381,1,0,0,0,119,384,1,0,0,0,121,397,1,
        0,0,0,123,124,5,109,0,0,124,125,5,97,0,0,125,126,5,105,0,0,126,127,
        5,110,0,0,127,2,1,0,0,0,128,129,5,123,0,0,129,4,1,0,0,0,130,131,
        5,125,0,0,131,6,1,0,0,0,132,133,5,110,0,0,133,134,5,117,0,0,134,
        135,5,109,0,0,135,136,5,98,0,0,136,137,5,101,0,0,137,138,5,114,0,
        0,138,8,1,0,0,0,139,140,5,98,0,0,140,141,5,111,0,0,141,142,5,111,
        0,0,142,143,5,108,0,0,143,10,1,0,0,0,144,145,5,115,0,0,145,146,5,
        116,0,0,146,147,5,114,0,0,147,148,5,105,0,0,148,149,5,110,0,0,149,
        150,5,103,0,0,150,12,1,0,0,0,151,152,5,114,0,0,152,153,5,101,0,0,
        153,154,5,116,0,0,154,155,5,117,0,0,155,156,5,114,0,0,156,157,5,
        110,0,0,157,14,1,0,0,0,158,159,5,118,0,0,159,160,5,97,0,0,160,161,
        5,114,0,0,161,16,1,0,0,0,162,163,5,100,0,0,163,164,5,121,0,0,164,
        165,5,110,0,0,165,166,5,97,0,0,166,167,5,109,0,0,167,168,5,105,0,
        0,168,169,5,99,0,0,169,18,1,0,0,0,170,171,5,102,0,0,171,172,5,117,
        0,0,172,173,5,110,0,0,173,174,5,99,0,0,174,20,1,0,0,0,175,176,5,
        102,0,0,176,177,5,111,0,0,177,178,5,114,0,0,178,22,1,0,0,0,179,180,
        5,117,0,0,180,181,5,110,0,0,181,182,5,116,0,0,182,183,5,105,0,0,
        183,184,5,108,0,0,184,24,1,0,0,0,185,186,5,98,0,0,186,187,5,121,
        0,0,187,26,1,0,0,0,188,189,5,98,0,0,189,190,5,114,0,0,190,191,5,
        101,0,0,191,192,5,97,0,0,192,193,5,107,0,0,193,28,1,0,0,0,194,195,
        5,99,0,0,195,196,5,111,0,0,196,197,5,110,0,0,197,198,5,116,0,0,198,
        199,5,105,0,0,199,200,5,110,0,0,200,201,5,117,0,0,201,202,5,101,
        0,0,202,30,1,0,0,0,203,204,5,105,0,0,204,205,5,102,0,0,205,32,1,
        0,0,0,206,207,5,101,0,0,207,208,5,108,0,0,208,209,5,115,0,0,209,
        210,5,101,0,0,210,34,1,0,0,0,211,212,5,101,0,0,212,213,5,108,0,0,
        213,214,5,105,0,0,214,215,5,102,0,0,215,36,1,0,0,0,216,217,5,98,
        0,0,217,218,5,101,0,0,218,219,5,103,0,0,219,220,5,105,0,0,220,221,
        5,110,0,0,221,38,1,0,0,0,222,223,5,101,0,0,223,224,5,110,0,0,224,
        225,5,100,0,0,225,40,1,0,0,0,226,227,5,110,0,0,227,228,5,111,0,0,
        228,229,5,116,0,0,229,42,1,0,0,0,230,231,5,97,0,0,231,232,5,110,
        0,0,232,233,5,100,0,0,233,44,1,0,0,0,234,235,5,111,0,0,235,236,5,
        114,0,0,236,46,1,0,0,0,237,238,5,43,0,0,238,48,1,0,0,0,239,240,5,
        45,0,0,240,50,1,0,0,0,241,242,5,42,0,0,242,52,1,0,0,0,243,244,5,
        47,0,0,244,54,1,0,0,0,245,246,5,37,0,0,246,56,1,0,0,0,247,248,5,
        61,0,0,248,58,1,0,0,0,249,250,5,60,0,0,250,251,5,45,0,0,251,60,1,
        0,0,0,252,253,5,61,0,0,253,254,5,61,0,0,254,62,1,0,0,0,255,256,5,
        33,0,0,256,257,5,61,0,0,257,64,1,0,0,0,258,259,5,60,0,0,259,66,1,
        0,0,0,260,261,5,62,0,0,261,68,1,0,0,0,262,263,5,60,0,0,263,264,5,
        61,0,0,264,70,1,0,0,0,265,266,5,62,0,0,266,267,5,61,0,0,267,72,1,
        0,0,0,268,269,5,46,0,0,269,270,5,46,0,0,270,271,5,46,0,0,271,74,
        1,0,0,0,272,273,5,40,0,0,273,76,1,0,0,0,274,275,5,41,0,0,275,78,
        1,0,0,0,276,277,5,91,0,0,277,80,1,0,0,0,278,279,5,93,0,0,279,82,
        1,0,0,0,280,281,5,44,0,0,281,84,1,0,0,0,282,283,5,10,0,0,283,86,
        1,0,0,0,284,290,3,93,46,0,285,291,3,89,44,0,286,288,3,89,44,0,287,
        286,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,0,289,291,3,91,45,0,290,
        285,1,0,0,0,290,287,1,0,0,0,291,88,1,0,0,0,292,296,5,46,0,0,293,
        295,3,93,46,0,294,293,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,296,
        297,1,0,0,0,297,90,1,0,0,0,298,296,1,0,0,0,299,301,7,0,0,0,300,302,
        7,1,0,0,301,300,1,0,0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,304,
        3,93,46,0,304,92,1,0,0,0,305,307,3,111,55,0,306,305,1,0,0,0,307,
        308,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,94,1,0,0,0,310,311,
        5,116,0,0,311,312,5,114,0,0,312,313,5,117,0,0,313,320,5,101,0,0,
        314,315,5,102,0,0,315,316,5,97,0,0,316,317,5,108,0,0,317,318,5,115,
        0,0,318,320,5,101,0,0,319,310,1,0,0,0,319,314,1,0,0,0,320,96,1,0,
        0,0,321,325,5,34,0,0,322,324,3,99,49,0,323,322,1,0,0,0,324,327,1,
        0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,328,1,0,0,0,327,325,1,
        0,0,0,328,329,5,34,0,0,329,330,6,48,0,0,330,98,1,0,0,0,331,335,8,
        2,0,0,332,335,3,103,51,0,333,335,3,101,50,0,334,331,1,0,0,0,334,
        332,1,0,0,0,334,333,1,0,0,0,335,100,1,0,0,0,336,337,5,39,0,0,337,
        338,5,34,0,0,338,102,1,0,0,0,339,340,5,92,0,0,340,341,7,3,0,0,341,
        104,1,0,0,0,342,345,3,107,53,0,343,345,3,109,54,0,344,342,1,0,0,
        0,344,343,1,0,0,0,345,351,1,0,0,0,346,350,3,107,53,0,347,350,3,109,
        54,0,348,350,3,111,55,0,349,346,1,0,0,0,349,347,1,0,0,0,349,348,
        1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,106,
        1,0,0,0,353,351,1,0,0,0,354,355,7,4,0,0,355,108,1,0,0,0,356,357,
        5,95,0,0,357,110,1,0,0,0,358,359,7,5,0,0,359,112,1,0,0,0,360,361,
        5,35,0,0,361,362,5,35,0,0,362,366,1,0,0,0,363,365,9,0,0,0,364,363,
        1,0,0,0,365,368,1,0,0,0,366,367,1,0,0,0,366,364,1,0,0,0,367,370,
        1,0,0,0,368,366,1,0,0,0,369,371,7,6,0,0,370,369,1,0,0,0,371,372,
        1,0,0,0,372,373,6,56,1,0,373,114,1,0,0,0,374,376,7,7,0,0,375,374,
        1,0,0,0,376,377,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,379,
        1,0,0,0,379,380,6,57,1,0,380,116,1,0,0,0,381,382,9,0,0,0,382,383,
        6,58,2,0,383,118,1,0,0,0,384,388,5,34,0,0,385,387,3,99,49,0,386,
        385,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,
        393,1,0,0,0,390,388,1,0,0,0,391,394,3,85,42,0,392,394,5,0,0,1,393,
        391,1,0,0,0,393,392,1,0,0,0,394,395,1,0,0,0,395,396,6,59,3,0,396,
        120,1,0,0,0,397,400,5,92,0,0,398,401,8,3,0,0,399,401,8,8,0,0,400,
        398,1,0,0,0,400,399,1,0,0,0,401,402,1,0,0,0,402,403,6,60,4,0,403,
        122,1,0,0,0,18,0,287,290,296,301,308,319,325,334,344,349,351,366,
        370,377,388,393,400,5,1,48,0,6,0,0,1,58,1,1,59,2,1,60,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    NUMBER = 4
    BOOL = 5
    STRING = 6
    RETURN = 7
    VAR = 8
    DYNAMIC = 9
    FUNC = 10
    FOR = 11
    UNTIL = 12
    BY = 13
    BREAK = 14
    CONTINUE = 15
    IF = 16
    ELSE = 17
    ELIF = 18
    BEGIN = 19
    END = 20
    NOT = 21
    AND = 22
    OR = 23
    PLUS = 24
    MINUS = 25
    MULT = 26
    DIV = 27
    MOD = 28
    EQUAL = 29
    LEFTARR = 30
    EQUALEQUAL = 31
    NOTEQUAL = 32
    LESS = 33
    GREATER = 34
    LESSOREQUAL = 35
    GREATEROREQUAL = 36
    ELLIPSIS = 37
    LBracket = 38
    RBracket = 39
    LSBracket = 40
    RSBracket = 41
    COMMA = 42
    NEWLINE = 43
    NumberLit = 44
    BooleanLit = 45
    StringLit = 46
    IDENTIFIER = 47
    COMMENT = 48
    WS = 49
    ERROR_CHAR = 50
    UNCLOSE_STRING = 51
    ILLEGAL_ESCAPE = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'main'", "'{'", "'}'", "'number'", "'bool'", "'string'", "'return'", 
            "'var'", "'dynamic'", "'func'", "'for'", "'until'", "'by'", 
            "'break'", "'continue'", "'if'", "'else'", "'elif'", "'begin'", 
            "'end'", "'not'", "'and'", "'or'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'='", "'<-'", "'=='", "'!='", "'<'", "'>'", "'<='", 
            "'>='", "'...'", "'('", "')'", "'['", "']'", "','", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "BOOL", "STRING", "RETURN", "VAR", "DYNAMIC", "FUNC", 
            "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", "IF", "ELSE", "ELIF", 
            "BEGIN", "END", "NOT", "AND", "OR", "PLUS", "MINUS", "MULT", 
            "DIV", "MOD", "EQUAL", "LEFTARR", "EQUALEQUAL", "NOTEQUAL", 
            "LESS", "GREATER", "LESSOREQUAL", "GREATEROREQUAL", "ELLIPSIS", 
            "LBracket", "RBracket", "LSBracket", "RSBracket", "COMMA", "NEWLINE", 
            "NumberLit", "BooleanLit", "StringLit", "IDENTIFIER", "COMMENT", 
            "WS", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "NUMBER", "BOOL", "STRING", "RETURN", 
                  "VAR", "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", 
                  "CONTINUE", "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", 
                  "AND", "OR", "PLUS", "MINUS", "MULT", "DIV", "MOD", "EQUAL", 
                  "LEFTARR", "EQUALEQUAL", "NOTEQUAL", "LESS", "GREATER", 
                  "LESSOREQUAL", "GREATEROREQUAL", "ELLIPSIS", "LBracket", 
                  "RBracket", "LSBracket", "RSBracket", "COMMA", "NEWLINE", 
                  "NumberLit", "DECIMAL", "EXPONENT", "INTEGER", "BooleanLit", 
                  "StringLit", "StringChar", "DoubleQuote", "EscapedSequence", 
                  "IDENTIFIER", "LETTER", "UNDERSCORE", "DIGIT", "COMMENT", 
                  "WS", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[48] = self.StringLit_action 
            actions[58] = self.ERROR_CHAR_action 
            actions[59] = self.UNCLOSE_STRING_action 
            actions[60] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def StringLit_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            setText(getText().substring(1, getText().length()-1));
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

            	esc = ['\n']
                temp = str(self.text)
                if (temp[-1] in esc):
                    raise UncloseString(temp[1:-1])
                else:
                    raise UncloseString(temp[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                temp = self.text
                raise IllegalEscape(temp[1:])

     


