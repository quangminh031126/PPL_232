# Generated from /Users/phamvoquangminh/repos/ass_PPL/initial/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,50,403,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,1,0,1,0,1,0,1,0,1,0,1,1,1,1,5,1,127,8,1,10,1,12,1,130,9,1,1,2,
        1,2,3,2,134,8,2,1,2,1,2,1,3,4,3,139,8,3,11,3,12,3,140,1,4,1,4,1,
        4,3,4,146,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
        16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,
        18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,
        23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,
        26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,
        29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,
        36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,
        41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,45,1,
        45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,50,3,50,315,
        8,50,1,50,3,50,318,8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,3,51,329,8,51,1,52,1,52,5,52,333,8,52,10,52,12,52,336,9,52,
        1,52,1,52,1,52,1,53,1,53,3,53,343,8,53,1,53,1,53,1,53,5,53,348,8,
        53,10,53,12,53,351,9,53,1,54,1,54,1,54,1,54,5,54,357,8,54,10,54,
        12,54,360,9,54,1,54,3,54,363,8,54,1,54,1,54,1,55,4,55,368,8,55,11,
        55,12,55,369,1,55,1,55,1,56,1,56,1,56,1,57,1,57,5,57,379,8,57,10,
        57,12,57,382,9,57,1,57,1,57,3,57,386,8,57,1,57,1,57,1,58,1,58,5,
        58,392,8,58,10,58,12,58,395,9,58,1,58,1,58,1,58,3,58,400,8,58,1,
        58,1,58,1,358,0,59,1,1,3,0,5,0,7,0,9,0,11,0,13,0,15,0,17,0,19,0,
        21,2,23,3,25,4,27,5,29,6,31,7,33,8,35,9,37,10,39,11,41,12,43,13,
        45,14,47,15,49,16,51,17,53,18,55,19,57,20,59,21,61,22,63,23,65,24,
        67,25,69,26,71,27,73,28,75,29,77,30,79,31,81,32,83,33,85,34,87,35,
        89,36,91,37,93,38,95,39,97,40,99,41,101,42,103,43,105,44,107,45,
        109,46,111,47,113,48,115,49,117,50,1,0,9,2,0,69,69,101,101,2,0,43,
        43,45,45,4,0,10,10,13,13,34,34,92,92,7,0,39,39,92,92,98,98,102,102,
        110,110,114,114,116,116,2,0,65,90,97,122,1,0,48,57,1,1,10,10,3,0,
        9,10,13,13,32,32,1,0,92,92,413,0,1,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
        0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,
        0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
        113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,1,119,1,0,0,0,3,124,1,0,
        0,0,5,131,1,0,0,0,7,138,1,0,0,0,9,145,1,0,0,0,11,147,1,0,0,0,13,
        150,1,0,0,0,15,153,1,0,0,0,17,155,1,0,0,0,19,157,1,0,0,0,21,159,
        1,0,0,0,23,166,1,0,0,0,25,171,1,0,0,0,27,178,1,0,0,0,29,185,1,0,
        0,0,31,189,1,0,0,0,33,197,1,0,0,0,35,202,1,0,0,0,37,206,1,0,0,0,
        39,212,1,0,0,0,41,215,1,0,0,0,43,221,1,0,0,0,45,230,1,0,0,0,47,233,
        1,0,0,0,49,238,1,0,0,0,51,243,1,0,0,0,53,249,1,0,0,0,55,253,1,0,
        0,0,57,257,1,0,0,0,59,261,1,0,0,0,61,264,1,0,0,0,63,266,1,0,0,0,
        65,268,1,0,0,0,67,270,1,0,0,0,69,272,1,0,0,0,71,274,1,0,0,0,73,276,
        1,0,0,0,75,279,1,0,0,0,77,282,1,0,0,0,79,285,1,0,0,0,81,287,1,0,
        0,0,83,289,1,0,0,0,85,292,1,0,0,0,87,295,1,0,0,0,89,299,1,0,0,0,
        91,301,1,0,0,0,93,303,1,0,0,0,95,305,1,0,0,0,97,307,1,0,0,0,99,309,
        1,0,0,0,101,311,1,0,0,0,103,328,1,0,0,0,105,330,1,0,0,0,107,342,
        1,0,0,0,109,352,1,0,0,0,111,367,1,0,0,0,113,373,1,0,0,0,115,376,
        1,0,0,0,117,389,1,0,0,0,119,120,5,109,0,0,120,121,5,97,0,0,121,122,
        5,105,0,0,122,123,5,110,0,0,123,2,1,0,0,0,124,128,5,46,0,0,125,127,
        3,7,3,0,126,125,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,
        1,0,0,0,129,4,1,0,0,0,130,128,1,0,0,0,131,133,7,0,0,0,132,134,7,
        1,0,0,133,132,1,0,0,0,133,134,1,0,0,0,134,135,1,0,0,0,135,136,3,
        7,3,0,136,6,1,0,0,0,137,139,3,19,9,0,138,137,1,0,0,0,139,140,1,0,
        0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,8,1,0,0,0,142,146,8,2,0,
        0,143,146,3,13,6,0,144,146,3,11,5,0,145,142,1,0,0,0,145,143,1,0,
        0,0,145,144,1,0,0,0,146,10,1,0,0,0,147,148,5,39,0,0,148,149,5,34,
        0,0,149,12,1,0,0,0,150,151,5,92,0,0,151,152,7,3,0,0,152,14,1,0,0,
        0,153,154,7,4,0,0,154,16,1,0,0,0,155,156,5,95,0,0,156,18,1,0,0,0,
        157,158,7,5,0,0,158,20,1,0,0,0,159,160,5,110,0,0,160,161,5,117,0,
        0,161,162,5,109,0,0,162,163,5,98,0,0,163,164,5,101,0,0,164,165,5,
        114,0,0,165,22,1,0,0,0,166,167,5,98,0,0,167,168,5,111,0,0,168,169,
        5,111,0,0,169,170,5,108,0,0,170,24,1,0,0,0,171,172,5,115,0,0,172,
        173,5,116,0,0,173,174,5,114,0,0,174,175,5,105,0,0,175,176,5,110,
        0,0,176,177,5,103,0,0,177,26,1,0,0,0,178,179,5,114,0,0,179,180,5,
        101,0,0,180,181,5,116,0,0,181,182,5,117,0,0,182,183,5,114,0,0,183,
        184,5,110,0,0,184,28,1,0,0,0,185,186,5,118,0,0,186,187,5,97,0,0,
        187,188,5,114,0,0,188,30,1,0,0,0,189,190,5,100,0,0,190,191,5,121,
        0,0,191,192,5,110,0,0,192,193,5,97,0,0,193,194,5,109,0,0,194,195,
        5,105,0,0,195,196,5,99,0,0,196,32,1,0,0,0,197,198,5,102,0,0,198,
        199,5,117,0,0,199,200,5,110,0,0,200,201,5,99,0,0,201,34,1,0,0,0,
        202,203,5,102,0,0,203,204,5,111,0,0,204,205,5,114,0,0,205,36,1,0,
        0,0,206,207,5,117,0,0,207,208,5,110,0,0,208,209,5,116,0,0,209,210,
        5,105,0,0,210,211,5,108,0,0,211,38,1,0,0,0,212,213,5,98,0,0,213,
        214,5,121,0,0,214,40,1,0,0,0,215,216,5,98,0,0,216,217,5,114,0,0,
        217,218,5,101,0,0,218,219,5,97,0,0,219,220,5,107,0,0,220,42,1,0,
        0,0,221,222,5,99,0,0,222,223,5,111,0,0,223,224,5,110,0,0,224,225,
        5,116,0,0,225,226,5,105,0,0,226,227,5,110,0,0,227,228,5,117,0,0,
        228,229,5,101,0,0,229,44,1,0,0,0,230,231,5,105,0,0,231,232,5,102,
        0,0,232,46,1,0,0,0,233,234,5,101,0,0,234,235,5,108,0,0,235,236,5,
        115,0,0,236,237,5,101,0,0,237,48,1,0,0,0,238,239,5,101,0,0,239,240,
        5,108,0,0,240,241,5,105,0,0,241,242,5,102,0,0,242,50,1,0,0,0,243,
        244,5,98,0,0,244,245,5,101,0,0,245,246,5,103,0,0,246,247,5,105,0,
        0,247,248,5,110,0,0,248,52,1,0,0,0,249,250,5,101,0,0,250,251,5,110,
        0,0,251,252,5,100,0,0,252,54,1,0,0,0,253,254,5,110,0,0,254,255,5,
        111,0,0,255,256,5,116,0,0,256,56,1,0,0,0,257,258,5,97,0,0,258,259,
        5,110,0,0,259,260,5,100,0,0,260,58,1,0,0,0,261,262,5,111,0,0,262,
        263,5,114,0,0,263,60,1,0,0,0,264,265,5,43,0,0,265,62,1,0,0,0,266,
        267,5,45,0,0,267,64,1,0,0,0,268,269,5,42,0,0,269,66,1,0,0,0,270,
        271,5,47,0,0,271,68,1,0,0,0,272,273,5,37,0,0,273,70,1,0,0,0,274,
        275,5,61,0,0,275,72,1,0,0,0,276,277,5,60,0,0,277,278,5,45,0,0,278,
        74,1,0,0,0,279,280,5,61,0,0,280,281,5,61,0,0,281,76,1,0,0,0,282,
        283,5,33,0,0,283,284,5,61,0,0,284,78,1,0,0,0,285,286,5,60,0,0,286,
        80,1,0,0,0,287,288,5,62,0,0,288,82,1,0,0,0,289,290,5,60,0,0,290,
        291,5,61,0,0,291,84,1,0,0,0,292,293,5,62,0,0,293,294,5,61,0,0,294,
        86,1,0,0,0,295,296,5,46,0,0,296,297,5,46,0,0,297,298,5,46,0,0,298,
        88,1,0,0,0,299,300,5,40,0,0,300,90,1,0,0,0,301,302,5,41,0,0,302,
        92,1,0,0,0,303,304,5,91,0,0,304,94,1,0,0,0,305,306,5,93,0,0,306,
        96,1,0,0,0,307,308,5,44,0,0,308,98,1,0,0,0,309,310,5,10,0,0,310,
        100,1,0,0,0,311,317,3,7,3,0,312,318,3,3,1,0,313,315,3,3,1,0,314,
        313,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,318,3,5,2,0,317,
        312,1,0,0,0,317,314,1,0,0,0,317,318,1,0,0,0,318,102,1,0,0,0,319,
        320,5,116,0,0,320,321,5,114,0,0,321,322,5,117,0,0,322,329,5,101,
        0,0,323,324,5,102,0,0,324,325,5,97,0,0,325,326,5,108,0,0,326,327,
        5,115,0,0,327,329,5,101,0,0,328,319,1,0,0,0,328,323,1,0,0,0,329,
        104,1,0,0,0,330,334,5,34,0,0,331,333,3,9,4,0,332,331,1,0,0,0,333,
        336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,
        334,1,0,0,0,337,338,5,34,0,0,338,339,6,52,0,0,339,106,1,0,0,0,340,
        343,3,15,7,0,341,343,3,17,8,0,342,340,1,0,0,0,342,341,1,0,0,0,343,
        349,1,0,0,0,344,348,3,15,7,0,345,348,3,17,8,0,346,348,3,19,9,0,347,
        344,1,0,0,0,347,345,1,0,0,0,347,346,1,0,0,0,348,351,1,0,0,0,349,
        347,1,0,0,0,349,350,1,0,0,0,350,108,1,0,0,0,351,349,1,0,0,0,352,
        353,5,35,0,0,353,354,5,35,0,0,354,358,1,0,0,0,355,357,9,0,0,0,356,
        355,1,0,0,0,357,360,1,0,0,0,358,359,1,0,0,0,358,356,1,0,0,0,359,
        362,1,0,0,0,360,358,1,0,0,0,361,363,7,6,0,0,362,361,1,0,0,0,363,
        364,1,0,0,0,364,365,6,54,1,0,365,110,1,0,0,0,366,368,7,7,0,0,367,
        366,1,0,0,0,368,369,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,
        371,1,0,0,0,371,372,6,55,1,0,372,112,1,0,0,0,373,374,9,0,0,0,374,
        375,6,56,2,0,375,114,1,0,0,0,376,380,5,34,0,0,377,379,3,9,4,0,378,
        377,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,
        385,1,0,0,0,382,380,1,0,0,0,383,386,3,99,49,0,384,386,5,0,0,1,385,
        383,1,0,0,0,385,384,1,0,0,0,386,387,1,0,0,0,387,388,6,57,3,0,388,
        116,1,0,0,0,389,393,5,34,0,0,390,392,3,9,4,0,391,390,1,0,0,0,392,
        395,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,396,1,0,0,0,395,
        393,1,0,0,0,396,399,5,92,0,0,397,400,8,3,0,0,398,400,8,8,0,0,399,
        397,1,0,0,0,399,398,1,0,0,0,400,401,1,0,0,0,401,402,6,58,4,0,402,
        118,1,0,0,0,19,0,128,133,140,145,314,317,328,334,342,347,349,358,
        362,369,380,385,393,399,5,1,52,0,6,0,0,1,56,1,1,57,2,1,58,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    NUMBER = 2
    BOOL = 3
    STRING = 4
    RETURN = 5
    VAR = 6
    DYNAMIC = 7
    FUNC = 8
    FOR = 9
    UNTIL = 10
    BY = 11
    BREAK = 12
    CONTINUE = 13
    IF = 14
    ELSE = 15
    ELIF = 16
    BEGIN = 17
    END = 18
    NOT = 19
    AND = 20
    OR = 21
    PLUS = 22
    MINUS = 23
    MULT = 24
    DIV = 25
    MOD = 26
    EQUAL = 27
    LEFTARR = 28
    EQUALEQUAL = 29
    NOTEQUAL = 30
    LESS = 31
    GREATER = 32
    LESSOREQUAL = 33
    GREATEROREQUAL = 34
    ELLIPSIS = 35
    LBracket = 36
    RBracket = 37
    LSBracket = 38
    RSBracket = 39
    COMMA = 40
    NEWLINE = 41
    NumberLit = 42
    BooleanLit = 43
    StringLit = 44
    IDENTIFIER = 45
    COMMENT = 46
    WS = 47
    ERROR_CHAR = 48
    UNCLOSE_STRING = 49
    ILLEGAL_ESCAPE = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'main'", "'number'", "'bool'", "'string'", "'return'", "'var'", 
            "'dynamic'", "'func'", "'for'", "'until'", "'by'", "'break'", 
            "'continue'", "'if'", "'else'", "'elif'", "'begin'", "'end'", 
            "'not'", "'and'", "'or'", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'='", "'<-'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", 
            "'...'", "'('", "')'", "'['", "']'", "','", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "BOOL", "STRING", "RETURN", "VAR", "DYNAMIC", "FUNC", 
            "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", "IF", "ELSE", "ELIF", 
            "BEGIN", "END", "NOT", "AND", "OR", "PLUS", "MINUS", "MULT", 
            "DIV", "MOD", "EQUAL", "LEFTARR", "EQUALEQUAL", "NOTEQUAL", 
            "LESS", "GREATER", "LESSOREQUAL", "GREATEROREQUAL", "ELLIPSIS", 
            "LBracket", "RBracket", "LSBracket", "RSBracket", "COMMA", "NEWLINE", 
            "NumberLit", "BooleanLit", "StringLit", "IDENTIFIER", "COMMENT", 
            "WS", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "T__0", "DECIMAL", "EXPONENT", "INTEGER", "StringChar", 
                  "DoubleQuote", "EscapedSequence", "LETTER", "UNDERSCORE", 
                  "DIGIT", "NUMBER", "BOOL", "STRING", "RETURN", "VAR", 
                  "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", 
                  "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", "AND", "OR", 
                  "PLUS", "MINUS", "MULT", "DIV", "MOD", "EQUAL", "LEFTARR", 
                  "EQUALEQUAL", "NOTEQUAL", "LESS", "GREATER", "LESSOREQUAL", 
                  "GREATEROREQUAL", "ELLIPSIS", "LBracket", "RBracket", 
                  "LSBracket", "RSBracket", "COMMA", "NEWLINE", "NumberLit", 
                  "BooleanLit", "StringLit", "IDENTIFIER", "COMMENT", "WS", 
                  "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[52] = self.StringLit_action 
            actions[56] = self.ERROR_CHAR_action 
            actions[57] = self.UNCLOSE_STRING_action 
            actions[58] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def StringLit_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
                    
                temp = self.text
                temp = temp[1:-1]  # Remove the opening and closing quotes
                self.text = temp

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                esc = ['\n']
                temp = str(self.text)
                if (temp[-1] in esc):
                    raise UncloseString(temp[1:-1])
                else:
                    raise UncloseString(temp[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                temp = self.text
                raise IllegalEscape(temp[1:])

     


