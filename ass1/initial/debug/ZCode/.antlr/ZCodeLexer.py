# Generated from /home/qmi/repos/PPL_232/ass1/initial/debug/ZCode/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,51,404,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,1,0,1,0,3,0,124,8,0,1,1,1,1,3,1,128,8,1,1,1,1,1,1,2,
        4,2,133,8,2,11,2,12,2,134,1,3,1,3,1,3,3,3,140,8,3,1,4,1,4,1,4,1,
        5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
        1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
        1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,
        1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,
        1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,
        1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,
        1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,
        1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,
        1,51,1,51,1,51,3,51,320,8,51,1,51,3,51,323,8,51,1,52,1,52,5,52,327,
        8,52,10,52,12,52,330,9,52,1,52,1,52,1,52,1,53,1,53,3,53,337,8,53,
        1,54,1,54,3,54,341,8,54,1,54,1,54,1,54,5,54,346,8,54,10,54,12,54,
        349,9,54,1,55,1,55,1,55,1,55,5,55,355,8,55,10,55,12,55,358,9,55,
        1,55,5,55,361,8,55,10,55,12,55,364,9,55,1,55,1,55,1,56,4,56,369,
        8,56,11,56,12,56,370,1,56,1,56,1,57,1,57,1,57,1,58,1,58,5,58,380,
        8,58,10,58,12,58,383,9,58,1,58,1,58,3,58,387,8,58,1,58,1,58,1,59,
        1,59,5,59,393,8,59,10,59,12,59,396,9,59,1,59,1,59,1,59,3,59,401,
        8,59,1,59,1,59,1,356,0,60,1,0,3,0,5,0,7,0,9,0,11,0,13,0,15,0,17,
        0,19,1,21,2,23,3,25,4,27,5,29,6,31,7,33,8,35,9,37,10,39,11,41,12,
        43,13,45,14,47,15,49,16,51,17,53,18,55,19,57,20,59,21,61,22,63,23,
        65,24,67,25,69,26,71,27,73,28,75,29,77,30,79,31,81,32,83,33,85,34,
        87,35,89,36,91,37,93,38,95,39,97,40,99,41,101,42,103,43,105,44,107,
        45,109,46,111,47,113,48,115,49,117,50,119,51,1,0,9,2,0,69,69,101,
        101,2,0,43,43,45,45,4,0,10,10,13,13,34,34,92,92,7,0,39,39,92,92,
        98,98,102,102,110,110,114,114,116,116,2,0,65,90,97,122,1,0,48,57,
        2,0,10,10,12,13,3,0,9,9,12,13,32,32,1,0,92,92,415,0,19,1,0,0,0,0,
        21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
        31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,
        41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,
        51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
        61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,
        71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,
        81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,
        91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,
        101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,
        0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,
        1,0,0,0,1,121,1,0,0,0,3,125,1,0,0,0,5,132,1,0,0,0,7,139,1,0,0,0,
        9,141,1,0,0,0,11,144,1,0,0,0,13,147,1,0,0,0,15,149,1,0,0,0,17,151,
        1,0,0,0,19,153,1,0,0,0,21,158,1,0,0,0,23,164,1,0,0,0,25,171,1,0,
        0,0,27,176,1,0,0,0,29,183,1,0,0,0,31,190,1,0,0,0,33,194,1,0,0,0,
        35,202,1,0,0,0,37,207,1,0,0,0,39,211,1,0,0,0,41,217,1,0,0,0,43,220,
        1,0,0,0,45,226,1,0,0,0,47,235,1,0,0,0,49,238,1,0,0,0,51,243,1,0,
        0,0,53,248,1,0,0,0,55,254,1,0,0,0,57,258,1,0,0,0,59,262,1,0,0,0,
        61,266,1,0,0,0,63,269,1,0,0,0,65,271,1,0,0,0,67,273,1,0,0,0,69,275,
        1,0,0,0,71,277,1,0,0,0,73,279,1,0,0,0,75,281,1,0,0,0,77,284,1,0,
        0,0,79,287,1,0,0,0,81,290,1,0,0,0,83,292,1,0,0,0,85,294,1,0,0,0,
        87,297,1,0,0,0,89,300,1,0,0,0,91,304,1,0,0,0,93,306,1,0,0,0,95,308,
        1,0,0,0,97,310,1,0,0,0,99,312,1,0,0,0,101,314,1,0,0,0,103,316,1,
        0,0,0,105,324,1,0,0,0,107,336,1,0,0,0,109,340,1,0,0,0,111,350,1,
        0,0,0,113,368,1,0,0,0,115,374,1,0,0,0,117,377,1,0,0,0,119,390,1,
        0,0,0,121,123,5,46,0,0,122,124,3,5,2,0,123,122,1,0,0,0,123,124,1,
        0,0,0,124,2,1,0,0,0,125,127,7,0,0,0,126,128,7,1,0,0,127,126,1,0,
        0,0,127,128,1,0,0,0,128,129,1,0,0,0,129,130,3,5,2,0,130,4,1,0,0,
        0,131,133,3,17,8,0,132,131,1,0,0,0,133,134,1,0,0,0,134,132,1,0,0,
        0,134,135,1,0,0,0,135,6,1,0,0,0,136,140,8,2,0,0,137,140,3,11,5,0,
        138,140,3,9,4,0,139,136,1,0,0,0,139,137,1,0,0,0,139,138,1,0,0,0,
        140,8,1,0,0,0,141,142,5,39,0,0,142,143,5,34,0,0,143,10,1,0,0,0,144,
        145,5,92,0,0,145,146,7,3,0,0,146,12,1,0,0,0,147,148,7,4,0,0,148,
        14,1,0,0,0,149,150,5,95,0,0,150,16,1,0,0,0,151,152,7,5,0,0,152,18,
        1,0,0,0,153,154,5,116,0,0,154,155,5,114,0,0,155,156,5,117,0,0,156,
        157,5,101,0,0,157,20,1,0,0,0,158,159,5,102,0,0,159,160,5,97,0,0,
        160,161,5,108,0,0,161,162,5,115,0,0,162,163,5,101,0,0,163,22,1,0,
        0,0,164,165,5,110,0,0,165,166,5,117,0,0,166,167,5,109,0,0,167,168,
        5,98,0,0,168,169,5,101,0,0,169,170,5,114,0,0,170,24,1,0,0,0,171,
        172,5,98,0,0,172,173,5,111,0,0,173,174,5,111,0,0,174,175,5,108,0,
        0,175,26,1,0,0,0,176,177,5,115,0,0,177,178,5,116,0,0,178,179,5,114,
        0,0,179,180,5,105,0,0,180,181,5,110,0,0,181,182,5,103,0,0,182,28,
        1,0,0,0,183,184,5,114,0,0,184,185,5,101,0,0,185,186,5,116,0,0,186,
        187,5,117,0,0,187,188,5,114,0,0,188,189,5,110,0,0,189,30,1,0,0,0,
        190,191,5,118,0,0,191,192,5,97,0,0,192,193,5,114,0,0,193,32,1,0,
        0,0,194,195,5,100,0,0,195,196,5,121,0,0,196,197,5,110,0,0,197,198,
        5,97,0,0,198,199,5,109,0,0,199,200,5,105,0,0,200,201,5,99,0,0,201,
        34,1,0,0,0,202,203,5,102,0,0,203,204,5,117,0,0,204,205,5,110,0,0,
        205,206,5,99,0,0,206,36,1,0,0,0,207,208,5,102,0,0,208,209,5,111,
        0,0,209,210,5,114,0,0,210,38,1,0,0,0,211,212,5,117,0,0,212,213,5,
        110,0,0,213,214,5,116,0,0,214,215,5,105,0,0,215,216,5,108,0,0,216,
        40,1,0,0,0,217,218,5,98,0,0,218,219,5,121,0,0,219,42,1,0,0,0,220,
        221,5,98,0,0,221,222,5,114,0,0,222,223,5,101,0,0,223,224,5,97,0,
        0,224,225,5,107,0,0,225,44,1,0,0,0,226,227,5,99,0,0,227,228,5,111,
        0,0,228,229,5,110,0,0,229,230,5,116,0,0,230,231,5,105,0,0,231,232,
        5,110,0,0,232,233,5,117,0,0,233,234,5,101,0,0,234,46,1,0,0,0,235,
        236,5,105,0,0,236,237,5,102,0,0,237,48,1,0,0,0,238,239,5,101,0,0,
        239,240,5,108,0,0,240,241,5,115,0,0,241,242,5,101,0,0,242,50,1,0,
        0,0,243,244,5,101,0,0,244,245,5,108,0,0,245,246,5,105,0,0,246,247,
        5,102,0,0,247,52,1,0,0,0,248,249,5,98,0,0,249,250,5,101,0,0,250,
        251,5,103,0,0,251,252,5,105,0,0,252,253,5,110,0,0,253,54,1,0,0,0,
        254,255,5,101,0,0,255,256,5,110,0,0,256,257,5,100,0,0,257,56,1,0,
        0,0,258,259,5,110,0,0,259,260,5,111,0,0,260,261,5,116,0,0,261,58,
        1,0,0,0,262,263,5,97,0,0,263,264,5,110,0,0,264,265,5,100,0,0,265,
        60,1,0,0,0,266,267,5,111,0,0,267,268,5,114,0,0,268,62,1,0,0,0,269,
        270,5,43,0,0,270,64,1,0,0,0,271,272,5,45,0,0,272,66,1,0,0,0,273,
        274,5,42,0,0,274,68,1,0,0,0,275,276,5,47,0,0,276,70,1,0,0,0,277,
        278,5,37,0,0,278,72,1,0,0,0,279,280,5,61,0,0,280,74,1,0,0,0,281,
        282,5,60,0,0,282,283,5,45,0,0,283,76,1,0,0,0,284,285,5,61,0,0,285,
        286,5,61,0,0,286,78,1,0,0,0,287,288,5,33,0,0,288,289,5,61,0,0,289,
        80,1,0,0,0,290,291,5,60,0,0,291,82,1,0,0,0,292,293,5,62,0,0,293,
        84,1,0,0,0,294,295,5,60,0,0,295,296,5,61,0,0,296,86,1,0,0,0,297,
        298,5,62,0,0,298,299,5,61,0,0,299,88,1,0,0,0,300,301,5,46,0,0,301,
        302,5,46,0,0,302,303,5,46,0,0,303,90,1,0,0,0,304,305,5,40,0,0,305,
        92,1,0,0,0,306,307,5,41,0,0,307,94,1,0,0,0,308,309,5,91,0,0,309,
        96,1,0,0,0,310,311,5,93,0,0,311,98,1,0,0,0,312,313,5,44,0,0,313,
        100,1,0,0,0,314,315,5,10,0,0,315,102,1,0,0,0,316,322,3,5,2,0,317,
        323,3,1,0,0,318,320,3,1,0,0,319,318,1,0,0,0,319,320,1,0,0,0,320,
        321,1,0,0,0,321,323,3,3,1,0,322,317,1,0,0,0,322,319,1,0,0,0,322,
        323,1,0,0,0,323,104,1,0,0,0,324,328,5,34,0,0,325,327,3,7,3,0,326,
        325,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,
        331,1,0,0,0,330,328,1,0,0,0,331,332,5,34,0,0,332,333,6,52,0,0,333,
        106,1,0,0,0,334,337,3,19,9,0,335,337,3,21,10,0,336,334,1,0,0,0,336,
        335,1,0,0,0,337,108,1,0,0,0,338,341,3,13,6,0,339,341,3,15,7,0,340,
        338,1,0,0,0,340,339,1,0,0,0,341,347,1,0,0,0,342,346,3,13,6,0,343,
        346,3,15,7,0,344,346,3,17,8,0,345,342,1,0,0,0,345,343,1,0,0,0,345,
        344,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,
        110,1,0,0,0,349,347,1,0,0,0,350,351,5,35,0,0,351,352,5,35,0,0,352,
        356,1,0,0,0,353,355,9,0,0,0,354,353,1,0,0,0,355,358,1,0,0,0,356,
        357,1,0,0,0,356,354,1,0,0,0,357,362,1,0,0,0,358,356,1,0,0,0,359,
        361,8,6,0,0,360,359,1,0,0,0,361,364,1,0,0,0,362,360,1,0,0,0,362,
        363,1,0,0,0,363,365,1,0,0,0,364,362,1,0,0,0,365,366,6,55,1,0,366,
        112,1,0,0,0,367,369,7,7,0,0,368,367,1,0,0,0,369,370,1,0,0,0,370,
        368,1,0,0,0,370,371,1,0,0,0,371,372,1,0,0,0,372,373,6,56,1,0,373,
        114,1,0,0,0,374,375,9,0,0,0,375,376,6,57,2,0,376,116,1,0,0,0,377,
        381,5,34,0,0,378,380,3,7,3,0,379,378,1,0,0,0,380,383,1,0,0,0,381,
        379,1,0,0,0,381,382,1,0,0,0,382,386,1,0,0,0,383,381,1,0,0,0,384,
        387,3,101,50,0,385,387,5,0,0,1,386,384,1,0,0,0,386,385,1,0,0,0,387,
        388,1,0,0,0,388,389,6,58,3,0,389,118,1,0,0,0,390,394,5,34,0,0,391,
        393,3,7,3,0,392,391,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,
        395,1,0,0,0,395,397,1,0,0,0,396,394,1,0,0,0,397,400,5,92,0,0,398,
        401,8,3,0,0,399,401,8,8,0,0,400,398,1,0,0,0,400,399,1,0,0,0,401,
        402,1,0,0,0,402,403,6,59,4,0,403,120,1,0,0,0,19,0,123,127,134,139,
        319,322,328,336,340,345,347,356,362,370,381,386,394,400,5,1,52,0,
        6,0,0,1,57,1,1,58,2,1,59,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TRUE = 1
    FALSE = 2
    NUMBER = 3
    BOOL = 4
    STRING = 5
    RETURN = 6
    VAR = 7
    DYNAMIC = 8
    FUNC = 9
    FOR = 10
    UNTIL = 11
    BY = 12
    BREAK = 13
    CONTINUE = 14
    IF = 15
    ELSE = 16
    ELIF = 17
    BEGIN = 18
    END = 19
    NOT = 20
    AND = 21
    OR = 22
    PLUS = 23
    MINUS = 24
    MULT = 25
    DIV = 26
    MOD = 27
    EQUAL = 28
    LEFTARR = 29
    EQUALEQUAL = 30
    NOTEQUAL = 31
    LESS = 32
    GREATER = 33
    LESSOREQUAL = 34
    GREATEROREQUAL = 35
    ELLIPSIS = 36
    LBracket = 37
    RBracket = 38
    LSBracket = 39
    RSBracket = 40
    COMMA = 41
    NEWLINE = 42
    NumberLit = 43
    StringLit = 44
    BoolLit = 45
    IDENTIFIER = 46
    COMMENT = 47
    WS = 48
    ERROR_CHAR = 49
    UNCLOSE_STRING = 50
    ILLEGAL_ESCAPE = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'number'", "'bool'", "'string'", "'return'", 
            "'var'", "'dynamic'", "'func'", "'for'", "'until'", "'by'", 
            "'break'", "'continue'", "'if'", "'else'", "'elif'", "'begin'", 
            "'end'", "'not'", "'and'", "'or'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'='", "'<-'", "'=='", "'!='", "'<'", "'>'", "'<='", 
            "'>='", "'...'", "'('", "')'", "'['", "']'", "','", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", "VAR", 
            "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", 
            "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", "AND", "OR", "PLUS", 
            "MINUS", "MULT", "DIV", "MOD", "EQUAL", "LEFTARR", "EQUALEQUAL", 
            "NOTEQUAL", "LESS", "GREATER", "LESSOREQUAL", "GREATEROREQUAL", 
            "ELLIPSIS", "LBracket", "RBracket", "LSBracket", "RSBracket", 
            "COMMA", "NEWLINE", "NumberLit", "StringLit", "BoolLit", "IDENTIFIER", 
            "COMMENT", "WS", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "DECIMAL", "EXPONENT", "INTEGER", "StringChar", "DoubleQuote", 
                  "EscapedSequence", "LETTER", "UNDERSCORE", "DIGIT", "TRUE", 
                  "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", "VAR", 
                  "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", 
                  "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", "AND", "OR", 
                  "PLUS", "MINUS", "MULT", "DIV", "MOD", "EQUAL", "LEFTARR", 
                  "EQUALEQUAL", "NOTEQUAL", "LESS", "GREATER", "LESSOREQUAL", 
                  "GREATEROREQUAL", "ELLIPSIS", "LBracket", "RBracket", 
                  "LSBracket", "RSBracket", "COMMA", "NEWLINE", "NumberLit", 
                  "StringLit", "BoolLit", "IDENTIFIER", "COMMENT", "WS", 
                  "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[52] = self.StringLit_action 
            actions[57] = self.ERROR_CHAR_action 
            actions[58] = self.UNCLOSE_STRING_action 
            actions[59] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def StringLit_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
                    
                temp = self.text
                temp = temp[1:-1]  # Remove the opening and closing quotes
                self.text = temp

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                esc = ['\n']
                temp = str(self.text)
                if (temp[-1] in esc):
                    raise UncloseString(temp[1:-1])
                else:
                    raise UncloseString(temp[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                temp = self.text
                raise IllegalEscape(temp[1:])

     


