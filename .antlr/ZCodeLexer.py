# Generated from /home/qmi/repos/PPL_232/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,51,444,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,128,8,0,1,1,1,1,1,1,1,2,1,2,1,2,
        1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,
        1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
        12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,
        17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
        23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
        25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,
        28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,
        35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,
        37,270,8,37,1,38,1,38,3,38,274,8,38,1,38,3,38,277,8,38,1,39,1,39,
        3,39,281,8,39,1,39,1,39,1,39,3,39,286,8,39,1,39,1,39,1,40,1,40,3,
        40,292,8,40,1,40,4,40,295,8,40,11,40,12,40,296,1,40,1,40,3,40,301,
        8,40,1,40,4,40,304,8,40,11,40,12,40,305,1,40,1,40,1,41,1,41,3,41,
        312,8,41,1,41,4,41,315,8,41,11,41,12,41,316,1,41,1,41,1,42,1,42,
        5,42,323,8,42,10,42,12,42,326,9,42,1,43,1,43,5,43,330,8,43,10,43,
        12,43,333,9,43,1,43,1,43,1,44,4,44,338,8,44,11,44,12,44,339,1,45,
        1,45,5,45,344,8,45,10,45,12,45,347,9,45,1,46,1,46,1,46,3,46,352,
        8,46,1,46,4,46,355,8,46,11,46,12,46,356,1,47,1,47,1,47,1,47,5,47,
        363,8,47,10,47,12,47,366,9,47,1,47,4,47,369,8,47,11,47,12,47,370,
        1,47,1,47,1,47,5,47,376,8,47,10,47,12,47,379,9,47,1,47,1,47,1,47,
        1,48,1,48,1,48,1,48,5,48,388,8,48,10,48,12,48,391,9,48,1,48,1,48,
        3,48,395,8,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,5,49,408,8,49,10,49,12,49,411,9,49,1,49,1,49,1,49,1,50,1,50,
        1,50,1,51,1,51,1,51,1,51,5,51,423,8,51,10,51,12,51,426,9,51,1,51,
        1,51,1,52,4,52,431,8,52,11,52,12,52,432,1,52,1,52,1,53,3,53,438,
        8,53,1,53,1,53,1,54,1,54,1,54,1,389,0,55,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,87,44,89,0,91,0,93,0,95,45,97,46,99,47,101,
        0,103,48,105,49,107,50,109,51,1,0,10,2,0,69,69,101,101,3,0,65,90,
        95,95,97,122,1,0,48,57,4,0,48,57,65,90,95,95,97,122,1,0,34,34,4,
        0,10,10,13,13,34,34,92,92,5,0,39,39,92,92,98,98,102,102,116,116,
        7,0,39,39,92,92,98,98,102,102,110,110,114,114,116,116,2,0,10,10,
        13,13,3,0,9,9,12,12,32,32,476,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,
        0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
        0,87,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,103,1,0,0,
        0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,1,127,1,0,0,0,3,129,
        1,0,0,0,5,132,1,0,0,0,7,137,1,0,0,0,9,142,1,0,0,0,11,146,1,0,0,0,
        13,148,1,0,0,0,15,150,1,0,0,0,17,152,1,0,0,0,19,154,1,0,0,0,21,158,
        1,0,0,0,23,161,1,0,0,0,25,165,1,0,0,0,27,168,1,0,0,0,29,170,1,0,
        0,0,31,173,1,0,0,0,33,176,1,0,0,0,35,178,1,0,0,0,37,181,1,0,0,0,
        39,183,1,0,0,0,41,185,1,0,0,0,43,187,1,0,0,0,45,189,1,0,0,0,47,191,
        1,0,0,0,49,197,1,0,0,0,51,201,1,0,0,0,53,205,1,0,0,0,55,208,1,0,
        0,0,57,212,1,0,0,0,59,220,1,0,0,0,61,222,1,0,0,0,63,228,1,0,0,0,
        65,237,1,0,0,0,67,244,1,0,0,0,69,249,1,0,0,0,71,251,1,0,0,0,73,257,
        1,0,0,0,75,269,1,0,0,0,77,271,1,0,0,0,79,278,1,0,0,0,81,289,1,0,
        0,0,83,309,1,0,0,0,85,320,1,0,0,0,87,327,1,0,0,0,89,337,1,0,0,0,
        91,341,1,0,0,0,93,348,1,0,0,0,95,358,1,0,0,0,97,383,1,0,0,0,99,398,
        1,0,0,0,101,415,1,0,0,0,103,418,1,0,0,0,105,430,1,0,0,0,107,437,
        1,0,0,0,109,441,1,0,0,0,111,112,5,110,0,0,112,113,5,117,0,0,113,
        114,5,109,0,0,114,115,5,98,0,0,115,116,5,101,0,0,116,128,5,114,0,
        0,117,118,5,115,0,0,118,119,5,116,0,0,119,120,5,114,0,0,120,121,
        5,105,0,0,121,122,5,110,0,0,122,128,5,103,0,0,123,124,5,98,0,0,124,
        125,5,111,0,0,125,126,5,111,0,0,126,128,5,108,0,0,127,111,1,0,0,
        0,127,117,1,0,0,0,127,123,1,0,0,0,128,2,1,0,0,0,129,130,5,105,0,
        0,130,131,5,102,0,0,131,4,1,0,0,0,132,133,5,101,0,0,133,134,5,108,
        0,0,134,135,5,105,0,0,135,136,5,102,0,0,136,6,1,0,0,0,137,138,5,
        101,0,0,138,139,5,108,0,0,139,140,5,115,0,0,140,141,5,101,0,0,141,
        8,1,0,0,0,142,143,5,102,0,0,143,144,5,111,0,0,144,145,5,114,0,0,
        145,10,1,0,0,0,146,147,5,45,0,0,147,12,1,0,0,0,148,149,5,43,0,0,
        149,14,1,0,0,0,150,151,5,42,0,0,151,16,1,0,0,0,152,153,5,47,0,0,
        153,18,1,0,0,0,154,155,5,97,0,0,155,156,5,110,0,0,156,157,5,100,
        0,0,157,20,1,0,0,0,158,159,5,111,0,0,159,160,5,114,0,0,160,22,1,
        0,0,0,161,162,5,46,0,0,162,163,5,46,0,0,163,164,5,46,0,0,164,24,
        1,0,0,0,165,166,5,60,0,0,166,167,5,45,0,0,167,26,1,0,0,0,168,169,
        5,61,0,0,169,28,1,0,0,0,170,171,5,61,0,0,171,172,5,61,0,0,172,30,
        1,0,0,0,173,174,5,62,0,0,174,175,5,61,0,0,175,32,1,0,0,0,176,177,
        5,62,0,0,177,34,1,0,0,0,178,179,5,60,0,0,179,180,5,61,0,0,180,36,
        1,0,0,0,181,182,5,60,0,0,182,38,1,0,0,0,183,184,5,40,0,0,184,40,
        1,0,0,0,185,186,5,41,0,0,186,42,1,0,0,0,187,188,5,91,0,0,188,44,
        1,0,0,0,189,190,5,93,0,0,190,46,1,0,0,0,191,192,5,98,0,0,192,193,
        5,101,0,0,193,194,5,103,0,0,194,195,5,105,0,0,195,196,5,110,0,0,
        196,48,1,0,0,0,197,198,5,101,0,0,198,199,5,110,0,0,199,200,5,100,
        0,0,200,50,1,0,0,0,201,202,5,110,0,0,202,203,5,111,0,0,203,204,5,
        116,0,0,204,52,1,0,0,0,205,206,5,33,0,0,206,207,5,61,0,0,207,54,
        1,0,0,0,208,209,5,118,0,0,209,210,5,97,0,0,210,211,5,114,0,0,211,
        56,1,0,0,0,212,213,5,100,0,0,213,214,5,121,0,0,214,215,5,110,0,0,
        215,216,5,97,0,0,216,217,5,109,0,0,217,218,5,105,0,0,218,219,5,99,
        0,0,219,58,1,0,0,0,220,221,5,44,0,0,221,60,1,0,0,0,222,223,5,98,
        0,0,223,224,5,114,0,0,224,225,5,101,0,0,225,226,5,97,0,0,226,227,
        5,107,0,0,227,62,1,0,0,0,228,229,5,99,0,0,229,230,5,111,0,0,230,
        231,5,110,0,0,231,232,5,116,0,0,232,233,5,105,0,0,233,234,5,110,
        0,0,234,235,5,117,0,0,235,236,5,101,0,0,236,64,1,0,0,0,237,238,5,
        114,0,0,238,239,5,101,0,0,239,240,5,116,0,0,240,241,5,117,0,0,241,
        242,5,114,0,0,242,243,5,110,0,0,243,66,1,0,0,0,244,245,5,102,0,0,
        245,246,5,117,0,0,246,247,5,110,0,0,247,248,5,99,0,0,248,68,1,0,
        0,0,249,250,5,37,0,0,250,70,1,0,0,0,251,252,5,117,0,0,252,253,5,
        110,0,0,253,254,5,116,0,0,254,255,5,105,0,0,255,256,5,108,0,0,256,
        72,1,0,0,0,257,258,5,98,0,0,258,259,5,121,0,0,259,74,1,0,0,0,260,
        261,5,116,0,0,261,262,5,114,0,0,262,263,5,117,0,0,263,270,5,101,
        0,0,264,265,5,102,0,0,265,266,5,97,0,0,266,267,5,108,0,0,267,268,
        5,115,0,0,268,270,5,101,0,0,269,260,1,0,0,0,269,264,1,0,0,0,270,
        76,1,0,0,0,271,273,3,89,44,0,272,274,3,91,45,0,273,272,1,0,0,0,273,
        274,1,0,0,0,274,276,1,0,0,0,275,277,3,93,46,0,276,275,1,0,0,0,276,
        277,1,0,0,0,277,78,1,0,0,0,278,280,3,89,44,0,279,281,3,91,45,0,280,
        279,1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,285,7,0,0,0,283,
        286,3,13,6,0,284,286,3,11,5,0,285,283,1,0,0,0,285,284,1,0,0,0,285,
        286,1,0,0,0,286,287,1,0,0,0,287,288,6,39,0,0,288,80,1,0,0,0,289,
        291,3,89,44,0,290,292,3,91,45,0,291,290,1,0,0,0,291,292,1,0,0,0,
        292,294,1,0,0,0,293,295,7,1,0,0,294,293,1,0,0,0,295,296,1,0,0,0,
        296,294,1,0,0,0,296,297,1,0,0,0,297,300,1,0,0,0,298,301,3,13,6,0,
        299,301,3,11,5,0,300,298,1,0,0,0,300,299,1,0,0,0,300,301,1,0,0,0,
        301,303,1,0,0,0,302,304,7,2,0,0,303,302,1,0,0,0,304,305,1,0,0,0,
        305,303,1,0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,308,6,40,1,0,
        308,82,1,0,0,0,309,311,3,89,44,0,310,312,3,91,45,0,311,310,1,0,0,
        0,311,312,1,0,0,0,312,314,1,0,0,0,313,315,7,1,0,0,314,313,1,0,0,
        0,315,316,1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,
        0,318,319,6,41,2,0,319,84,1,0,0,0,320,324,7,1,0,0,321,323,7,3,0,
        0,322,321,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,
        0,325,86,1,0,0,0,326,324,1,0,0,0,327,331,7,2,0,0,328,330,7,3,0,0,
        329,328,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,
        332,334,1,0,0,0,333,331,1,0,0,0,334,335,6,43,3,0,335,88,1,0,0,0,
        336,338,7,2,0,0,337,336,1,0,0,0,338,339,1,0,0,0,339,337,1,0,0,0,
        339,340,1,0,0,0,340,90,1,0,0,0,341,345,5,46,0,0,342,344,7,2,0,0,
        343,342,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,
        346,92,1,0,0,0,347,345,1,0,0,0,348,351,7,0,0,0,349,352,3,13,6,0,
        350,352,3,11,5,0,351,349,1,0,0,0,351,350,1,0,0,0,351,352,1,0,0,0,
        352,354,1,0,0,0,353,355,7,2,0,0,354,353,1,0,0,0,355,356,1,0,0,0,
        356,354,1,0,0,0,356,357,1,0,0,0,357,94,1,0,0,0,358,364,5,34,0,0,
        359,363,8,4,0,0,360,361,5,39,0,0,361,363,5,34,0,0,362,359,1,0,0,
        0,362,360,1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,
        0,365,368,1,0,0,0,366,364,1,0,0,0,367,369,3,101,50,0,368,367,1,0,
        0,0,369,370,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,377,1,0,
        0,0,372,376,8,4,0,0,373,374,5,39,0,0,374,376,5,34,0,0,375,372,1,
        0,0,0,375,373,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,378,1,
        0,0,0,378,380,1,0,0,0,379,377,1,0,0,0,380,381,5,34,0,0,381,382,6,
        47,4,0,382,96,1,0,0,0,383,389,5,34,0,0,384,388,8,4,0,0,385,386,5,
        39,0,0,386,388,5,34,0,0,387,384,1,0,0,0,387,385,1,0,0,0,388,391,
        1,0,0,0,389,390,1,0,0,0,389,387,1,0,0,0,390,394,1,0,0,0,391,389,
        1,0,0,0,392,395,3,107,53,0,393,395,5,0,0,1,394,392,1,0,0,0,394,393,
        1,0,0,0,395,396,1,0,0,0,396,397,6,48,5,0,397,98,1,0,0,0,398,409,
        5,34,0,0,399,408,8,5,0,0,400,401,5,39,0,0,401,408,5,34,0,0,402,403,
        5,92,0,0,403,404,5,39,0,0,404,408,5,34,0,0,405,406,5,92,0,0,406,
        408,7,6,0,0,407,399,1,0,0,0,407,400,1,0,0,0,407,402,1,0,0,0,407,
        405,1,0,0,0,408,411,1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,
        412,1,0,0,0,411,409,1,0,0,0,412,413,5,34,0,0,413,414,6,49,6,0,414,
        100,1,0,0,0,415,416,5,92,0,0,416,417,8,7,0,0,417,102,1,0,0,0,418,
        419,5,35,0,0,419,420,5,35,0,0,420,424,1,0,0,0,421,423,8,8,0,0,422,
        421,1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,
        427,1,0,0,0,426,424,1,0,0,0,427,428,6,51,7,0,428,104,1,0,0,0,429,
        431,7,9,0,0,430,429,1,0,0,0,431,432,1,0,0,0,432,430,1,0,0,0,432,
        433,1,0,0,0,433,434,1,0,0,0,434,435,6,52,7,0,435,106,1,0,0,0,436,
        438,5,13,0,0,437,436,1,0,0,0,437,438,1,0,0,0,438,439,1,0,0,0,439,
        440,5,10,0,0,440,108,1,0,0,0,441,442,9,0,0,0,442,443,6,54,8,0,443,
        110,1,0,0,0,32,0,127,269,273,276,280,285,291,296,300,305,311,316,
        324,331,339,345,351,356,362,364,370,375,377,387,389,394,407,409,
        424,432,437,9,1,39,0,1,40,1,1,41,2,1,43,3,1,47,4,1,48,5,1,49,6,6,
        0,0,1,54,7
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TYPE = 1
    IF = 2
    ELIF = 3
    ELSE = 4
    FOR = 5
    SUB = 6
    ADD = 7
    MUL = 8
    DIV = 9
    AND = 10
    OR = 11
    CONCAT = 12
    ASSIGN = 13
    EQ = 14
    DEQ = 15
    GE = 16
    GT = 17
    LE = 18
    LT = 19
    LP = 20
    RP = 21
    LB = 22
    RB = 23
    BEGIN = 24
    END = 25
    NOT = 26
    NEQ = 27
    VAR = 28
    DYN = 29
    COMMA = 30
    BREAK = 31
    CONTINUE = 32
    RETURN = 33
    FUNC = 34
    MOD = 35
    UNTIL = 36
    BY = 37
    BoolLit = 38
    NumberLit = 39
    INVALID_NUMBER_1 = 40
    INVALID_NUMBER_2 = 41
    INVALID_NUMBER_3 = 42
    IDENTIFIER = 43
    INVALID_IDENTIFIER = 44
    ILLEGAL_ESCAPE = 45
    UNCLOSE_STRING = 46
    StringLit = 47
    COMMENT = 48
    WS = 49
    NEWLINE = 50
    ERROR_CHAR = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'elif'", "'else'", "'for'", "'-'", "'+'", "'*'", "'/'", 
            "'and'", "'or'", "'...'", "'<-'", "'='", "'=='", "'>='", "'>'", 
            "'<='", "'<'", "'('", "')'", "'['", "']'", "'begin'", "'end'", 
            "'not'", "'!='", "'var'", "'dynamic'", "','", "'break'", "'continue'", 
            "'return'", "'func'", "'%'", "'until'", "'by'" ]

    symbolicNames = [ "<INVALID>",
            "TYPE", "IF", "ELIF", "ELSE", "FOR", "SUB", "ADD", "MUL", "DIV", 
            "AND", "OR", "CONCAT", "ASSIGN", "EQ", "DEQ", "GE", "GT", "LE", 
            "LT", "LP", "RP", "LB", "RB", "BEGIN", "END", "NOT", "NEQ", 
            "VAR", "DYN", "COMMA", "BREAK", "CONTINUE", "RETURN", "FUNC", 
            "MOD", "UNTIL", "BY", "BoolLit", "NumberLit", "INVALID_NUMBER_1", 
            "INVALID_NUMBER_2", "INVALID_NUMBER_3", "IDENTIFIER", "INVALID_IDENTIFIER", 
            "ILLEGAL_ESCAPE", "UNCLOSE_STRING", "StringLit", "COMMENT", 
            "WS", "NEWLINE", "ERROR_CHAR" ]

    ruleNames = [ "TYPE", "IF", "ELIF", "ELSE", "FOR", "SUB", "ADD", "MUL", 
                  "DIV", "AND", "OR", "CONCAT", "ASSIGN", "EQ", "DEQ", "GE", 
                  "GT", "LE", "LT", "LP", "RP", "LB", "RB", "BEGIN", "END", 
                  "NOT", "NEQ", "VAR", "DYN", "COMMA", "BREAK", "CONTINUE", 
                  "RETURN", "FUNC", "MOD", "UNTIL", "BY", "BoolLit", "NumberLit", 
                  "INVALID_NUMBER_1", "INVALID_NUMBER_2", "INVALID_NUMBER_3", 
                  "IDENTIFIER", "INVALID_IDENTIFIER", "INTEGER", "DECIMAL", 
                  "EXPONENT", "ILLEGAL_ESCAPE", "UNCLOSE_STRING", "StringLit", 
                  "INVALID_ESCAPED_SEQUENCE", "COMMENT", "WS", "NEWLINE", 
                  "ERROR_CHAR" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None





    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[39] = self.INVALID_NUMBER_1_action 
            actions[40] = self.INVALID_NUMBER_2_action 
            actions[41] = self.INVALID_NUMBER_3_action 
            actions[43] = self.INVALID_IDENTIFIER_action 
            actions[47] = self.ILLEGAL_ESCAPE_action 
            actions[48] = self.UNCLOSE_STRING_action 
            actions[49] = self.StringLit_action 
            actions[54] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def INVALID_NUMBER_1_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            raise ErrorToken(self.text)
     

    def INVALID_NUMBER_2_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def INVALID_NUMBER_3_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            raise ErrorToken(self.text)
     

    def INVALID_IDENTIFIER_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            raise IllegalEscape(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
            raise UncloseString(self.text)
     

    def StringLit_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:
             self.text = str(bytes(self.text, "utf-8").decode("unicode_escape"))[1:-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 7:
            raise ErrorToken(self.text)
     


